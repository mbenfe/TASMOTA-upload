#---------------------------------#
# AUTOXEC.BE 1.0 PWX 12           #
#---------------------------------#
import string
import global
import mqtt
import json
import gpio

var rx=16    
var tx=17    
var rst=2   
var bsl=13   


#-------------------------------- COMMANDES -----------------------------------------#
def Calibration(cmd, idx, payload, payload_json)
    var argument = string.split(string.toupper(payload)," ")
    if(argument[0]!="VA" && argument[0]!="VB" && argument[0] !="VC" && argument[0] != "IA" && argument[0] != "IB" && argument[0] != "IC" && argument[0] != "IN" 
        || argument[1] == "")
        print("erreur arguments")
        return
    end
    var token
    if(argument[0] =="VA" || argument[0] =="VB" || argument[0] =="VC")
        token = string.format("CAL %s %s",argument[0],argument[1])
    else
        token = string.format("CAL %s %s %s",argument[0],argument[1],argument[2])
    end
    global.serialSend.flush()
    global.serialSend.write(bytes().fromstring(token))
    print(token)
    tasmota.resp_cmnd_done()
end

def readcal()
    global.serialSend.flush()
    global.serialSend.write(bytes().fromstring("CAL READ"))
    print('CAL READ')
    tasmota.resp_cmnd_done()
end

def storecal()
    global.serialSend.flush()
    global.serialSend.write(bytes().fromstring("CAL STORE"))
    print('CAL STORE')
    tasmota.resp_cmnd_done()
end

def Init()
    gpio.pin_mode(rx,gpio.INPUT)
    gpio.pin_mode(tx,gpio.OUTPUT)
    global.serialSend = serial(rx,tx,115200,serial.SERIAL_8N1)
    print('serial initialised')
    tasmota.resp_cmnd_done()
end

def BlReset(cmd, idx, payload, payload_json)
    global.serialSend.flush()
    global.serialSend.write(bytes().fromstring("SET RESET"))
    print("SET RESET")
    tasmota.resp_cmnd_done()
end

def BlMode(cmd, idx, payload, payload_json)
    var argument = string.split(string.toupper(payload)," ")
    if(argument[0]!="CAL" && argument[0] !="LOG" )
        print("erreur arguments")
        return
    end
    global.serialSend.flush()
    if(argument[0]=="CAL")
        global.serialSend.write(bytes().fromstring("SET MODE CAL"))
        print("SET MODE CAL")
    else
        global.serialSend.write(bytes().fromstring("SET MODE LOG"))
        print("SET MODE LOG")
    end
    tasmota.resp_cmnd_done()
end

def BlType(cmd, idx, payload, payload_json)
    var argument = string.split(string.toupper(payload),' ')
    if(argument[0]!='MONO' && argument[0] !='TRI' )
        print('erreur arguments')
        return
    end
    if(argument[0]=='MONO')
        global.serialSend.write(bytes().fromstring('SET TYPE MONO'))
    else
        global.serialSend.write(bytes().fromstring('SET TYPE TRI'))
    end
    tasmota.delay(500)
    tasmota.resp_cmnd_done()
end


def Stm32Reset()
        gpio.pin_mode(rst,gpio.OUTPUT)
        gpio.pin_mode(bsl,gpio.OUTPUT)
  
        gpio.digital_write(rst, 0)
        tasmota.delay(100)               # wait 10ms
        gpio.digital_write(rst, 1)
        tasmota.delay(100)               # wait 10ms
        tasmota.resp_cmnd("STM32 reset")
end

def ville(cmd, idx,payload, payload_json)
    import json
    var file = open("esp32.cfg","rt")
    var buffer = file.read()
    var myjson=json.load(buffer)
    myjson["ville"]=payload
    buffer = json.dump(myjson)
    file.close()
    file = open("esp32.cfg","wt")
    file.write(buffer)
    file.close()
    tasmota.resp_cmnd("done")
end

def device(cmd, idx,payload, payload_json)
    import json
    var file = open("esp32.cfg","rt")
    var buffer = file.read()
    var myjson=json.load(buffer)
    myjson["device"]=payload
    buffer = json.dump(myjson)
    file.close()
    file = open("esp32.cfg","wt")
    file.write(buffer)
    file.close()
    tasmota.resp_cmnd("done")
end

def getfile(cmd, idx,payload, payload_json)
    import string
    import path
    var nom_fichier
    nom_fichier=string.split(payload,'/').pop()
    mqttprint(nom_fichier)
    var filepath = 'https://raw.githubusercontent.com//mbenfe/upload/main/'
    filepath+=payload
    mqttprint(filepath)
    var wc=webclient()
    wc.set_follow_redirects(true)
    wc.begin(filepath)
    var st=wc.GET()
    if st!=200 
        mqttprint('erreur code:'+str(st))
        raise 'erreur','code: '+str(st) 
    end
    st='Fetched '+str(wc.write_file(nom_fichier))
    mqttprint(st)
    wc.close()
    var message = 'uploaded:'+nom_fichier
    tasmota.resp_cmnd(message)
    return st
end

def sendconfig(cmd, idx,payload, payload_json)
    import string
    import json
    var file
    var buffer
    var myjson
    var device
    var total = "";
    var header
    var trouve = false
    print("send:",payload)
    ############################ fichier config ###################
    file = open("esp32.cfg","rt")
    buffer = file.read()
    myjson=json.load(buffer)
    device = myjson["device"]
    file.close()

    file = open(payload,"rt")
    if file == nil
        print("fichier non existant:",payload)
        return
    end
    buffer = file.read()
    file.close()
    myjson = json.load(buffer)
    for key:myjson.keys()
        if key == device
            trouve = true
          total="CONFIG"+" "+key+"_"
                    +myjson[key]["root"][0]+"_"+myjson[key]["root"][1]+"_"+myjson[key]["root"][2]+"_"+myjson[key]["root"][3]+"_"
                    +myjson[key]["produit"]+"_"
                    +myjson[key]["techno"][0]+"_"+myjson[key]["techno"][1]+"_"+myjson[key]["techno"][2]+"_"+myjson[key]["techno"][3]+"_"
                    +myjson[key]["ratio"][0]+"_"+myjson[key]["ratio"][1]+"_"+myjson[key]["ratio"][2]+"_"+myjson[key]["ratio"][3]
        end
    end
    if trouve == true
        global.serialSend.flush()
        var mybytes=bytes().fromstring(total)
        global.serialSend.write(mybytes)
        print(total)
        tasmota.resp_cmnd("config sent")
    else
        print("device ",device," non touv√©")
        tasmota.resp_cmnd("config not sent")
    end
end

def help()
    print("Stm32reset:reset du STM32")
    print("getfile <path/filename>: load file")
    print("sendconfig p_<name>.json: configure pwx")
    print("ville <nom>: set ville")
    print("device <nom>: set device name")
    print("BlReset: reset the BL6552 chip")
    print("BlMode <mode> (cal ou log): set mode ")
    print("Init",Init)
    print("cal <parameter> <value> (VA, VB ou VC)")
    print("ex: cal VA 235")
    print("cal <device> <parameter> <value> (IA, IB ou IC)")
    print("ex: cal IA 1 5.1")
    print("readcal: affiche les parametres de calibration")
    print("storecal: sauvegarde la calibration")
    print("h: this help")
 end

tasmota.cmd("seriallog 0")
print("serial log disabled")
tasmota.cmd("Teleperiod 0")
 
tasmota.cmd("timezone 2")
print("timezone set")

tasmota.add_cmd("Stm32reset",Stm32Reset)
tasmota.add_cmd("getfile",getfile)
tasmota.add_cmd("sendconfig",sendconfig)
tasmota.add_cmd("ville",ville)
tasmota.add_cmd("device",device)
tasmota.add_cmd("BlReset",BlReset)
tasmota.add_cmd("BlMode",BlMode)
tasmota.add_cmd("Init",Init)
tasmota.add_cmd("cal",Calibration)
tasmota.add_cmd("readcal",readcal)
tasmota.add_cmd("storecal",storecal)
tasmota.add_cmd("h",help)

############################################################
tasmota.cmd("Init")
tasmota.delay(500)
tasmota.load("pwx12_driver.be")


